/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./exercises/graph.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./exercises/graph.ts":
/*!****************************!*\
  !*** ./exercises/graph.ts ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _presenters_MatrixPresenter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../presenters/MatrixPresenter */ \"./presenters/MatrixPresenter.ts\");\n/* harmony import */ var _structures_Matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures/Matrix */ \"./structures/Matrix.ts\");\n/* harmony import */ var _structures_Queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../structures/Queue */ \"./structures/Queue.ts\");\n/* harmony import */ var _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../structures/RationalNumber */ \"./structures/RationalNumber.ts\");\n/* harmony import */ var _structures_Vector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../structures/Vector */ \"./structures/Vector.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Vector2D extends _structures_Vector__WEBPACK_IMPORTED_MODULE_5__[\"Vector\"] {\r\n    constructor(x, y) {\r\n        super(2);\r\n        if (typeof x === \"number\") {\r\n            this.elements[0] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](x);\r\n        }\r\n        else if (x instanceof _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"]) {\r\n            this.elements[0] = x;\r\n        }\r\n        if (typeof y === \"number\") {\r\n            this.elements[1] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](y);\r\n        }\r\n        else if (y instanceof _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"]) {\r\n            this.elements[1] = y;\r\n        }\r\n    }\r\n    get x() {\r\n        return this.elements[0].toNumber();\r\n    }\r\n    get y() {\r\n        return this.elements[1].toNumber();\r\n    }\r\n    toRowVector() {\r\n        const res = new _structures_Vector__WEBPACK_IMPORTED_MODULE_5__[\"RowVector\"](2);\r\n        res.elements = [new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](this.x), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](this.y)];\r\n        return res;\r\n    }\r\n    toColumnVector() {\r\n        const res = new _structures_Vector__WEBPACK_IMPORTED_MODULE_5__[\"ColumnVector\"](2);\r\n        res.elements = [new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](this.x), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](this.y)];\r\n        return res;\r\n    }\r\n    static fromVector(v) {\r\n        if (v.m !== 2) {\r\n            throw new Error(\"Vector dimension must be 2.\");\r\n        }\r\n        return new Vector2D(v.elements[0], v.elements[1]);\r\n    }\r\n    static GetScallingMatrix(scale) {\r\n        const m = new _structures_Matrix__WEBPACK_IMPORTED_MODULE_2__[\"Matrix\"](2, 2);\r\n        m.elements = [[new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](scale), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](0)], [new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](0), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](scale)]];\r\n        return m;\r\n    }\r\n    static GetRotationMatrix(angle) {\r\n        const rotationAngle = angle * (180 / Math.PI); // converted to radians\r\n        const m = new _structures_Matrix__WEBPACK_IMPORTED_MODULE_2__[\"Matrix\"](2, 2);\r\n        m.elements = [[new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](Math.cos(rotationAngle)), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](-Math.sin(rotationAngle))],\r\n            [new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](Math.sin(rotationAngle)), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](Math.cos(rotationAngle))]];\r\n        return m;\r\n    }\r\n}\r\nfunction randomVector2D() {\r\n    return new Vector2D(Math.floor(Math.random() * 20) - 10, Math.floor(Math.random() * 20) - 10);\r\n}\r\nconst orthonormalAxesColor = \"#666600\";\r\nconst orthonormalGridLinesColor = \"#f0f0ff\";\r\nconst vectorColor = \"#3030f0\";\r\nconst transformedVectorColor = \"#909090\";\r\nconst unitSize = 20;\r\nconst vector = randomVector2D();\r\nconst secondBasis = [new Vector2D(6, 2), new Vector2D(2, 6)];\r\nconst transformations = new _structures_Queue__WEBPACK_IMPORTED_MODULE_3__[\"Queue\"]();\r\ntransformations.enqueue(Vector2D.GetScallingMatrix(0.5));\r\ntransformations.enqueue(Vector2D.GetRotationMatrix(60));\r\n// const transformedVector: Vector2D = Vector2D.fromVector(vector.toRowVector().matrixProduct(T));\r\nconst secondVectorSpaceAxesColor = \"#006666\";\r\nconst secondVectorSpaceGridColor = \"#fff0f0\";\r\njquery__WEBPACK_IMPORTED_MODULE_0__(document).ready(() => {\r\n    const canvas = jquery__WEBPACK_IMPORTED_MODULE_0__(\"#graphCanvas\")[0];\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const canvasWidth = canvas.width;\r\n    const canvasHeight = canvas.height;\r\n    const originX = canvasWidth / 2;\r\n    const originY = canvasHeight / 2;\r\n    jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(\"Canvas size: \" + canvasWidth + \" x \" + canvasHeight + \" px\"));\r\n    jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(\"Canvas origin: \" + originX + \" x \" + originY + \" px\"));\r\n    jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(\"Vector: [\" + vector.x + \", \" + vector.y + \"]\").css(\"color\", vectorColor));\r\n    drawOrthonormalGrid();\r\n    drawVector(vector);\r\n    // drawTransformedVector(vector, transformations);\r\n    drawChangeCoordinates();\r\n    function drawOrthonormalGrid() {\r\n        // grid\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = orthonormalGridLinesColor;\r\n        ctx.setLineDash([2, 2]);\r\n        ctx.lineWidth = 1;\r\n        let i = 0;\r\n        do {\r\n            ctx.moveTo(originX + unitSize * i, 0);\r\n            ctx.lineTo(originX + unitSize * i, canvasHeight);\r\n            ctx.stroke();\r\n            ctx.moveTo(originX - unitSize * i, 0);\r\n            ctx.lineTo(originX - unitSize * i, canvasHeight);\r\n            ctx.stroke();\r\n            i++;\r\n        } while (originX + unitSize * i < canvasWidth);\r\n        i = 0;\r\n        do {\r\n            ctx.moveTo(0, originY + unitSize * i);\r\n            ctx.lineTo(canvasWidth, originY + unitSize * i);\r\n            ctx.stroke();\r\n            ctx.moveTo(0, originY - unitSize * i);\r\n            ctx.lineTo(canvasWidth, originY - unitSize * i);\r\n            ctx.stroke();\r\n            i++;\r\n        } while (originY + unitSize * i < canvasHeight);\r\n        // axes\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = orthonormalAxesColor;\r\n        ctx.setLineDash([]);\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(originX, 0);\r\n        ctx.lineTo(originX, canvasHeight);\r\n        ctx.stroke();\r\n        ctx.moveTo(0, originY);\r\n        ctx.lineTo(canvasWidth, originY);\r\n        ctx.stroke();\r\n    }\r\n    function drawVector(vector, color = vectorColor, lineWidth = 2) {\r\n        ctx.beginPath();\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeStyle = color;\r\n        ctx.moveTo(originX, originY);\r\n        // because the canvas origin is top left:\r\n        ctx.lineTo(originX + unitSize * vector.elements[0].toNumber(), originY - unitSize * vector.elements[1].toNumber());\r\n        ctx.stroke();\r\n    }\r\n    function drawTransformedVector(vector, transformations) {\r\n        let transformedVector = vector;\r\n        while (!transformations.isEmpty()) {\r\n            const transformation = transformations.dequeue();\r\n            transformedVector = Vector2D.fromVector(transformation.vectorProduct(transformedVector.toColumnVector()));\r\n            drawVector(transformedVector, transformedVectorColor, 1);\r\n            jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(\"Transformation matrix:\"));\r\n            const divMatrix = jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\");\r\n            jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(divMatrix);\r\n            _presenters_MatrixPresenter__WEBPACK_IMPORTED_MODULE_1__[\"MatrixPresenter\"].printTableMatrix(transformation, divMatrix);\r\n            jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(`Transformed vector: (${transformedVector.x}, ${transformedVector.y})`)\r\n                .css(\"color\", transformedVectorColor));\r\n        }\r\n    }\r\n    function drawChangeCoordinates() {\r\n        drawVector(secondBasis[0], secondVectorSpaceAxesColor);\r\n        drawVector(secondBasis[1], secondVectorSpaceAxesColor);\r\n        const changeOfCoordinatesMatrix = new _structures_Matrix__WEBPACK_IMPORTED_MODULE_2__[\"Matrix\"](2, 2);\r\n        changeOfCoordinatesMatrix.elements[0] = [new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](6), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](2)];\r\n        changeOfCoordinatesMatrix.elements[1] = [new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](2), new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_4__[\"RationalNumber\"](6)];\r\n        const vectorSecondBasis = Vector2D.fromVector(changeOfCoordinatesMatrix\r\n            .vectorProduct(vector.toColumnVector())); // it's the other way around\r\n        jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(\"Change of basis matrix:\"));\r\n        const divMatrix = jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\");\r\n        jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(divMatrix);\r\n        _presenters_MatrixPresenter__WEBPACK_IMPORTED_MODULE_1__[\"MatrixPresenter\"].printTableMatrix(changeOfCoordinatesMatrix, divMatrix);\r\n        jquery__WEBPACK_IMPORTED_MODULE_0__(\"#legend\").append(jquery__WEBPACK_IMPORTED_MODULE_0__(\"<div></div>\").text(`Vector in the new basis: (${vectorSecondBasis.x}, ${vectorSecondBasis.y})`)\r\n            .css(\"color\", transformedVectorColor));\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack:///./exercises/graph.ts?");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("throw new Error(\"Module build failed: Error: Could not find file: 'D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\jquery\\\\dist\\\\jquery.js'.\\n    at getValidSourceFile (D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\typescript\\\\lib\\\\typescript.js:103059:23)\\n    at Object.getEmitOutput (D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\typescript\\\\lib\\\\typescript.js:103402:30)\\n    at Object.getEmitOutput (D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\ts-loader\\\\dist\\\\instances.js:184:41)\\n    at getEmit (D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\ts-loader\\\\dist\\\\index.js:188:37)\\n    at successLoader (D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\ts-loader\\\\dist\\\\index.js:34:11)\\n    at Object.loader (D:\\\\Projects\\\\LinearAlgebra\\\\node_modules\\\\ts-loader\\\\dist\\\\index.js:21:12)\");\n\n//# sourceURL=webpack:///./node_modules/jquery/dist/jquery.js?");

/***/ }),

/***/ "./presenters/MatrixPresenter.ts":
/*!***************************************!*\
  !*** ./presenters/MatrixPresenter.ts ***!
  \***************************************/
/*! exports provided: MatrixPresenter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatrixPresenter\", function() { return MatrixPresenter; });\nclass MatrixPresenter {\r\n    static printTableMatrix(matrix, container) {\r\n        let rowEchelonForm = matrix.isRowEchelonForm();\r\n        let reducedRowEchelonForm = rowEchelonForm ? matrix.isReducedRowEchelonForm() : false;\r\n        let table = $(\"<table></table>\").addClass(\"matrix\");\r\n        if (reducedRowEchelonForm) {\r\n            table.addClass(\"reducedRowEchelonMatrix\");\r\n        }\r\n        else if (rowEchelonForm) {\r\n            table.addClass(\"rowEchelonMatrix\");\r\n        }\r\n        for (let i = 0; i < matrix.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix.elements[i][j].toString()).addClass(\"matrixElement\");\r\n                if (reducedRowEchelonForm && j === i) {\r\n                    td.addClass(\"pivotElement\");\r\n                }\r\n                tr.append(td);\r\n            }\r\n            table.append(tr);\r\n        }\r\n        container.append(table);\r\n        container.append(\"<br />\");\r\n    }\r\n    static printMatrixEquality(matrix1, opeartor, matrix2, result, container) {\r\n        let table = $(\"<table></table>\");\r\n        let tr0 = $(\"<tr></tr>\");\r\n        table.append(tr0);\r\n        let td01 = $(\"<td></td>\");\r\n        tr0.append(td01);\r\n        let td02 = $(\"<td></td>\").text(opeartor).css(\"vertical-align\", \"middle\").css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n        tr0.append(td02);\r\n        let td03 = $(\"<td></td>\");\r\n        tr0.append(td03);\r\n        let td04 = $(\"<td></td>\").text(\"=\").css(\"vertical-align\", \"middle\").css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n        tr0.append(td04);\r\n        let td05 = $(\"<td></td>\");\r\n        tr0.append(td05);\r\n        let table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < matrix1.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix1.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix1.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td01.append(table1);\r\n        table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < matrix2.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix2.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix2.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td03.append(table1);\r\n        table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < result.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < result.n; j++) {\r\n                let td = $(\"<td></td>\").text(result.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td05.append(table1);\r\n        container.append(table);\r\n        container.append(\"<br />\");\r\n    }\r\n    static printMatrixEquality2(matrix1, opeartor1, matrix2, matrix3, opeartor2, matrix4, container) {\r\n        let table = $(\"<table></table>\");\r\n        let tr0 = $(\"<tr></tr>\");\r\n        table.append(tr0);\r\n        let td01 = $(\"<td></td>\");\r\n        tr0.append(td01);\r\n        let td02 = $(\"<td></td>\").text(opeartor1).css(\"vertical-align\", \"middle\").css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n        tr0.append(td02);\r\n        let td03 = $(\"<td></td>\");\r\n        tr0.append(td03);\r\n        let td04 = $(\"<td></td>\").text(\"=\").css(\"vertical-align\", \"middle\").css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n        tr0.append(td04);\r\n        let td05 = $(\"<td></td>\");\r\n        tr0.append(td05);\r\n        let td06 = $(\"<td></td>\").text(opeartor2).css(\"vertical-align\", \"middle\").css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n        tr0.append(td06);\r\n        let td07 = $(\"<td></td>\");\r\n        tr0.append(td07);\r\n        let table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < matrix1.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix1.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix1.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td01.append(table1);\r\n        table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < matrix2.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix2.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix2.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td03.append(table1);\r\n        table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < matrix3.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix3.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix3.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td05.append(table1);\r\n        table1 = $(\"<table></table>\").addClass(\"matrix\");\r\n        for (let i = 0; i < matrix4.m; i++) {\r\n            let tr = $(\"<tr></tr>\");\r\n            for (let j = 0; j < matrix4.n; j++) {\r\n                let td = $(\"<td></td>\").text(matrix4.elements[i][j].toString()).css(\"padding-left\", \"5px\").css(\"padding-right\", \"5px\");\r\n                tr.append(td);\r\n            }\r\n            table1.append(tr);\r\n        }\r\n        td07.append(table1);\r\n        container.append(table);\r\n        container.append(\"<br />\");\r\n    }\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))\n\n//# sourceURL=webpack:///./presenters/MatrixPresenter.ts?");

/***/ }),

/***/ "./structures/ArithmeticEvaluator.ts":
/*!*******************************************!*\
  !*** ./structures/ArithmeticEvaluator.ts ***!
  \*******************************************/
/*! exports provided: ArithmeticEvaluator, TokenType, Token, Lexer, Parser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArithmeticEvaluator\", function() { return ArithmeticEvaluator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TokenType\", function() { return TokenType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Token\", function() { return Token; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Lexer\", function() { return Lexer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony import */ var _structures_Queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures/Queue */ \"./structures/Queue.ts\");\n/* harmony import */ var _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/RationalNumber */ \"./structures/RationalNumber.ts\");\n/* harmony import */ var _structures_Stack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures/Stack */ \"./structures/Stack.ts\");\n\r\n\r\n\r\nclass ArithmeticEvaluator {\r\n    static isNumber(code) {\r\n        return /^\\d/.test(code);\r\n    }\r\n    static isOperator(code) {\r\n        return /[\\+\\-\\*\\/\\^]/.test(code);\r\n    }\r\n    static isLeftAssociativeOperator(operator) {\r\n        return /[\\+\\-\\*\\/]/.test(operator);\r\n    }\r\n    static isRightAssociativeOperator(operator) {\r\n        return /[\\^]/.test(operator);\r\n    }\r\n    static precedence(operator) {\r\n        if (/[\\+\\-]/.test(operator)) {\r\n            return 1;\r\n        }\r\n        if (/[\\*\\/]/.test(operator)) {\r\n            return 2;\r\n        }\r\n        if (/[\\^]/.test(operator)) {\r\n            return 3;\r\n        }\r\n        throw new Error(\"Unknown operator.\");\r\n    }\r\n    static toReversePolishNotation(code) {\r\n        let tokens = code.match(/\\(|\\)|\\d+(\\.\\d+)?|\\w+|[\\+\\-\\*\\/\\^]/g);\r\n        let i = 0;\r\n        let outputQueue = new _structures_Queue__WEBPACK_IMPORTED_MODULE_0__[\"Queue\"]();\r\n        let operatorStack = new _structures_Stack__WEBPACK_IMPORTED_MODULE_2__[\"Stack\"]();\r\n        while (i < tokens.length) {\r\n            if (this.isNumber(tokens[i])) {\r\n                outputQueue.enqueue(tokens[i]);\r\n            }\r\n            else if (this.isOperator(tokens[i])) {\r\n                let op1 = tokens[i];\r\n                while (!operatorStack.isEmpty() && this.isOperator(operatorStack.peek())) {\r\n                    if ((this.isLeftAssociativeOperator(op1) && (this.precedence(op1) <= this.precedence(operatorStack.peek()))) ||\r\n                        (this.isRightAssociativeOperator(op1) && (this.precedence(op1) < this.precedence(operatorStack.peek())))) {\r\n                        outputQueue.enqueue(operatorStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorStack.push(op1);\r\n            }\r\n            else if (tokens[i] === \"(\") {\r\n                operatorStack.push(tokens[i]);\r\n            }\r\n            else if (tokens[i] === \")\") {\r\n                while (!operatorStack.isEmpty() && operatorStack.peek() !== \"(\") {\r\n                    outputQueue.enqueue(operatorStack.pop());\r\n                }\r\n                if (!operatorStack.isEmpty() && operatorStack.peek() === \"(\") {\r\n                    operatorStack.pop();\r\n                }\r\n                else {\r\n                    throw new Error(\"Mismatched parentheses.\");\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        while (!operatorStack.isEmpty()) {\r\n            if (operatorStack.peek() === \"(\") {\r\n                throw new Error(\"Mismatched parentheses.\");\r\n            }\r\n            else {\r\n                outputQueue.enqueue(operatorStack.pop());\r\n            }\r\n        }\r\n        return outputQueue.toArray();\r\n    }\r\n    static evaluateFromRPN(tokens) {\r\n        let stack = new _structures_Stack__WEBPACK_IMPORTED_MODULE_2__[\"Stack\"]();\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            if (!this.isOperator(tokens[i])) {\r\n                stack.push(parseFloat(tokens[i]));\r\n            }\r\n            else {\r\n                let op1 = stack.pop();\r\n                let op2 = stack.pop();\r\n                switch (tokens[i]) {\r\n                    case \"+\":\r\n                        stack.push(op2 + op1);\r\n                        break;\r\n                    case \"-\":\r\n                        stack.push(op2 - op1);\r\n                        break;\r\n                    case \"*\":\r\n                        stack.push(op2 * op1);\r\n                        break;\r\n                    case \"/\":\r\n                        stack.push(op2 / op1);\r\n                        break;\r\n                    case \"^\":\r\n                        stack.push(Math.pow(op2, op1));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return stack.pop();\r\n    }\r\n}\r\nvar TokenType;\r\n(function (TokenType) {\r\n    TokenType[TokenType[\"Plus\"] = 0] = \"Plus\";\r\n    TokenType[TokenType[\"Minus\"] = 1] = \"Minus\";\r\n    TokenType[TokenType[\"Multiply\"] = 2] = \"Multiply\";\r\n    TokenType[TokenType[\"Divide\"] = 3] = \"Divide\";\r\n    TokenType[TokenType[\"Exponent\"] = 4] = \"Exponent\";\r\n    TokenType[TokenType[\"Number\"] = 5] = \"Number\";\r\n    TokenType[TokenType[\"LParen\"] = 6] = \"LParen\";\r\n    TokenType[TokenType[\"RParen\"] = 7] = \"RParen\";\r\n    TokenType[TokenType[\"End\"] = 8] = \"End\";\r\n    TokenType[TokenType[\"Unknown\"] = 9] = \"Unknown\";\r\n})(TokenType || (TokenType = {}));\r\nclass Token {\r\n    constructor(type, value) {\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n}\r\nclass Lexer {\r\n    constructor(input) {\r\n        this.tokens = input.replace(\" \", \"\").match(/\\(|\\)|\\d+(\\.\\d+)?|[\\+\\-\\*\\/\\^]/g);\r\n        this.tokenIndex = 0;\r\n    }\r\n    getNextToken() {\r\n        if (this.tokens.length === this.tokenIndex) {\r\n            return new Token(TokenType.End);\r\n        }\r\n        let input = this.tokens[this.tokenIndex++];\r\n        return this.getToken(input);\r\n    }\r\n    getCurrentToken() {\r\n        if (this.tokens.length - 1 === this.tokenIndex) {\r\n            return new Token(TokenType.End);\r\n        }\r\n        let input = this.tokens[this.tokenIndex];\r\n        return this.getToken(input);\r\n    }\r\n    revert() {\r\n        if (this.tokenIndex <= 0) {\r\n            throw Error(\"Index out of range\");\r\n        }\r\n        this.tokenIndex--;\r\n    }\r\n    getToken(input) {\r\n        if (/\\+/.test(input)) {\r\n            return new Token(TokenType.Plus);\r\n        }\r\n        if (/\\-/.test(input)) {\r\n            return new Token(TokenType.Minus);\r\n        }\r\n        if (/\\*/.test(input)) {\r\n            return new Token(TokenType.Multiply);\r\n        }\r\n        if (/\\//.test(input)) {\r\n            return new Token(TokenType.Divide);\r\n        }\r\n        if (/\\^/.test(input)) {\r\n            return new Token(TokenType.Exponent);\r\n        }\r\n        if (/\\d+(\\.\\d+)?/.test(input)) {\r\n            return new Token(TokenType.Number, parseFloat(input));\r\n        }\r\n        if (/\\(/.test(input)) {\r\n            return new Token(TokenType.LParen);\r\n        }\r\n        if (/\\)/.test(input)) {\r\n            return new Token(TokenType.RParen);\r\n        }\r\n        return new Token(TokenType.Unknown);\r\n    }\r\n}\r\nclass Parser {\r\n    parse(code) {\r\n        this.lex = new Lexer(code);\r\n        let expression = this.fourthOrderOperators();\r\n        let token = this.lex.getCurrentToken(); // is already advanced because of number()\r\n        if (token.type === TokenType.End) {\r\n            return expression;\r\n        }\r\n        throw Error(\"End expected\");\r\n    }\r\n    // addition and substraction\r\n    fourthOrderOperators() {\r\n        let component1 = this.thirdOrderOperators();\r\n        let token = this.lex.getNextToken();\r\n        while (token.type === TokenType.Plus || token.type === TokenType.Minus) {\r\n            let component2 = this.thirdOrderOperators();\r\n            if (token.type === TokenType.Plus) {\r\n                component1 = component1.add(component2);\r\n            }\r\n            else if (token.type === TokenType.Minus) {\r\n                component1 = component1.sub(component2);\r\n            }\r\n            token = this.lex.getNextToken();\r\n        }\r\n        this.lex.revert();\r\n        return component1;\r\n    }\r\n    // multiplication and division\r\n    thirdOrderOperators() {\r\n        let factor1 = this.secondOrderOperators();\r\n        let token = this.lex.getNextToken();\r\n        while (token.type === TokenType.Multiply || token.type === TokenType.Divide) {\r\n            let factor2 = this.secondOrderOperators();\r\n            if (token.type === TokenType.Multiply) {\r\n                factor1 = factor1.mult(factor2);\r\n            }\r\n            else if (token.type === TokenType.Divide) {\r\n                factor1 = factor1.div(factor2);\r\n            }\r\n            token = this.lex.getNextToken();\r\n        }\r\n        this.lex.revert();\r\n        return factor1;\r\n    }\r\n    // exponents and roots\r\n    secondOrderOperators() {\r\n        let factor1 = this.firstOrderOperators();\r\n        let token = this.lex.getNextToken();\r\n        while (token.type === TokenType.Exponent) {\r\n            let factor2 = this.firstOrderOperators();\r\n            factor1 = factor1.exp(factor2);\r\n            token = this.lex.getNextToken();\r\n        }\r\n        this.lex.revert();\r\n        return factor1;\r\n    }\r\n    // numbers and parantheses\r\n    firstOrderOperators() {\r\n        let value = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_1__[\"RationalNumber\"](1);\r\n        let token = this.lex.getNextToken();\r\n        if (token.type === TokenType.Plus || token.type === TokenType.Minus) {\r\n            if (token.type === TokenType.Minus) {\r\n                value = value.mult(-1);\r\n            }\r\n            token = this.lex.getNextToken();\r\n        }\r\n        if (token.type === TokenType.LParen) {\r\n            value = value.mult(this.fourthOrderOperators());\r\n            token = this.lex.getNextToken();\r\n            if (token.type !== TokenType.RParen) {\r\n                throw Error(\"Unbalanced parenthesis\");\r\n            }\r\n        }\r\n        else {\r\n            if (token.type === TokenType.Number) {\r\n                value = value.mult(token.value);\r\n            }\r\n            else {\r\n                throw Error(\"Not a number\");\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n}\r\n/*\r\n    public static evaluate(expresion: string): RationalNumber {\r\n    var digitPattern = new RegExp('0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9');\r\n    var signPattern = new RegExp('\\+|\\-');\r\n    var numberPattern = new RegExp('[' + signPattern + ']' + '{' + digitPattern + '}');\r\n    var factorPattern = new RegExp(numberPattern + '|\\(' + expressionPattern + '\\)');\r\n    var componentPattern = new RegExp(factorPattern + '[{( \\* | \\/ )' + factorPattern + '}]');\r\n    var expressionPattern = new RegExp(componentPattern + '[{( \\+ | \\-)' + componentPattern + '}]');\r\n}*/\r\n/*\r\nexprr: 4thORDER+;\r\n4thORDER: component1=3rdORDER ((PLUS|MINUS) component2=3rdORDER)+;\r\n3rdORDER: factor1=2NDORDER ((MULTIPLY|DIVIDE) factor1=2ndORDER)+\r\n2ndORDER: factor1=1stORDER (EXPONENT factor2=1stORDER)+\r\n1stORDER: (PLUS|MINUS|empty) (LPAREN value=4thORDER RPAREN| NUMBER)\r\n*/ \r\n\n\n//# sourceURL=webpack:///./structures/ArithmeticEvaluator.ts?");

/***/ }),

/***/ "./structures/Matrix.ts":
/*!******************************!*\
  !*** ./structures/Matrix.ts ***!
  \******************************/
/*! exports provided: Matrix, MatrixIdentity, MatrixElimination, MatrixPermutation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Matrix\", function() { return Matrix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatrixIdentity\", function() { return MatrixIdentity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatrixElimination\", function() { return MatrixElimination; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MatrixPermutation\", function() { return MatrixPermutation; });\n/* harmony import */ var _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures/RationalNumber */ \"./structures/RationalNumber.ts\");\n/* harmony import */ var _structures_Vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/Vector */ \"./structures/Vector.ts\");\n\r\n\r\nclass Matrix {\r\n    constructor(m, n) {\r\n        this.m = m;\r\n        this.n = n;\r\n        this.elements = [];\r\n        for (let i = 0; i < this.m; i++) {\r\n            this.elements[i] = [];\r\n        }\r\n    }\r\n    equals(M) {\r\n        if (this.m !== M.m || this.n !== M.n) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                if (!this.elements[i][j].equals(M.elements[i][j])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    add(x) {\r\n        if (this.m !== x.m || this.n !== x.n) {\r\n            throw \"Mismatched dimensions.\";\r\n        }\r\n        const res = new Matrix(this.m, this.n);\r\n        for (let i = 0; i < res.m; i++) {\r\n            for (let j = 0; j < res.n; j++) {\r\n                res.elements[i][j] = this.elements[i][j].add(x.elements[i][j]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    sub(x) {\r\n        if (this.m !== x.m || this.n !== x.n) {\r\n            throw \"Mismatched dimensions.\";\r\n        }\r\n        const res = new Matrix(this.m, this.n);\r\n        for (let i = 0; i < res.m; i++) {\r\n            for (let j = 0; j < res.n; j++) {\r\n                res.elements[i][j] = this.elements[i][j].sub(x.elements[i][j]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    mult(x) {\r\n        let res = null;\r\n        if (typeof x === \"number\") {\r\n            res = new Matrix(this.m, this.n);\r\n            for (let i = 0; i < res.m; i++) {\r\n                for (let j = 0; j < res.n; j++) {\r\n                    res.elements[i][j] = this.elements[i][j].mult(x);\r\n                }\r\n            }\r\n        }\r\n        else if (x instanceof _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"]) {\r\n            res = new Matrix(this.m, this.n);\r\n            for (let i = 0; i < res.m; i++) {\r\n                for (let j = 0; j < res.n; j++) {\r\n                    res.elements[i][j] = this.elements[i][j].mult(x);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (x instanceof Matrix) {\r\n                if (this.n !== x.m) {\r\n                    throw \"Mismatched dimensions.\";\r\n                }\r\n                res = new Matrix(this.m, x.n);\r\n                for (let i = 0; i < res.m; i++) {\r\n                    for (let j = 0; j < res.n; j++) {\r\n                        let sum = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n                        for (let k = 0; k < this.n; k++) {\r\n                            sum = sum.add(this.elements[i][k].mult(x.elements[k][j]));\r\n                        }\r\n                        res.elements[i][j] = sum;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    vectorProduct(v) {\r\n        if (this.n !== v.m) {\r\n            throw \"Mismatched dimensions.\";\r\n        }\r\n        const res = new _structures_Vector__WEBPACK_IMPORTED_MODULE_1__[\"ColumnVector\"](v.m);\r\n        for (let i = 0; i < this.m; i++) {\r\n            let sum = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n            for (let j = 0; j < this.n; j++) {\r\n                sum = sum.add(this.elements[i][j].mult(v.elements[j]));\r\n            }\r\n            res.elements[i] = sum;\r\n        }\r\n        return res;\r\n    }\r\n    transpose() {\r\n        const ret = new Matrix(this.n, this.m);\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                ret.elements[j][i] = this.elements[i][j];\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    deepCopy() {\r\n        let ret = new Matrix(this.m, this.n);\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                ret.elements[i][j] = this.elements[i][j];\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    switchRows(idx1, idx2) {\r\n        if (this.m < idx1 || this.m < idx2) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.n; i++) {\r\n            let tmp = this.elements[idx1][i];\r\n            this.elements[idx1][i] = this.elements[idx2][i];\r\n            this.elements[idx2][i] = tmp;\r\n        }\r\n    }\r\n    multiplyRow(idx, scalar) {\r\n        if (this.m < idx) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.n; i++) {\r\n            this.elements[idx][i] = this.elements[idx][i].mult(scalar).simplifiedForm();\r\n        }\r\n    }\r\n    addRows(idx1, idx2, scalar) {\r\n        if (this.m < idx1 || this.m < idx2) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.n; i++) {\r\n            this.elements[idx1][i] = this.elements[idx2][i].mult(scalar).add(this.elements[idx1][i]).simplifiedForm();\r\n        }\r\n    }\r\n    addRow1ToRow2(idx1, scalar1, idx2, scalar2) {\r\n        if (this.m < idx1 || this.m < idx2) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.n; i++) {\r\n            this.elements[idx2][i] = this.elements[idx2][i].mult(scalar2).add(this.elements[idx1][i].mult(scalar1)).simplifiedForm();\r\n        }\r\n    }\r\n    // a square matrix is a matrix with the same number of rows and columns\r\n    isSquare() {\r\n        return this.m === this.n;\r\n    }\r\n    // a diagonal matrix is a matrix in which the entries outside the main diagonal are all zero\r\n    isDiagonal() {\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                if (i === j) {\r\n                    continue;\r\n                }\r\n                if (!this.elements[i][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // the identity matrix of size n is the n × n square matrix with ones on the main diagonal and zeros elsewhere\r\n    // [ALIASES]: unit matrix\r\n    isIdentity() {\r\n        if (this.m !== this.n) {\r\n            throw new Error(\"Not a square matrix.\");\r\n        }\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                if (i === j) {\r\n                    if (!this.elements[i][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1))) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n                if (!this.elements[i][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // a matrix is normal if it commutes with its conjugate transpose\r\n    isNormal() {\r\n        throw \"Not implemented\";\r\n    }\r\n    // the conjugate transpose of an m-by-n matrix A with complex entries is the n-by-m matrix A∗ obtained from A\r\n    // by taking the transpose and then taking the complex conjugate of each entry\r\n    // [ALIASES]: Hermitian transpose\r\n    toConjugateTranspose() {\r\n        throw \"Not implemented\";\r\n    }\r\n    isUpperTriangular() {\r\n        // todo: check if definition is valid for a non square matrix\r\n        // if (this.m !== this.n) { throw new Error(\"Not a square matrix.\"); }\r\n        for (let i = 1; i < this.m; i++) {\r\n            for (let j = 0; j < i; j++) {\r\n                if (!this.elements[i][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isLowerTriangular() {\r\n        // todo: check if definition is valid for a non square matrix\r\n        // if (this.m !== this.n) { throw new Error(\"Not a square matrix.\"); }\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = i + 1; j < this.n; j++) {\r\n                if (!this.elements[i][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // a symmetric matrix is a square matrix that is equal to its transpose\r\n    isSymmetric() {\r\n        if (this.m !== this.n) {\r\n            throw new Error(\"Not a square matrix.\");\r\n        }\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                if (!this.elements[i][j].equals(this.elements[j][i])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // an orthogonal matrix is a square matrix with real entries whose columns and rows are orthogonal unit vectors\r\n    // [ALIASES]: real orthogonal matrix\r\n    isOrthogonal() {\r\n        let MT = this.transpose();\r\n        return this.mult(MT).isIdentity();\r\n    }\r\n    isRowEchelonForm() {\r\n        let foundZeroRow = false;\r\n        // all nonzero rows (rows with at least one nonzero element) are above any rows of all zeroes\r\n        // (all zero rows, if any, belong at the bottom of the matrix)\r\n        for (let i = 0; i < this.m; i++) {\r\n            if (this.isZeroRow(i)) {\r\n                foundZeroRow = true;\r\n            }\r\n            else {\r\n                if (foundZeroRow) {\r\n                    return false;\r\n                }\r\n            } // if current row is not zero, but a previous row is zero, then matrix is not in row echelon form\r\n        }\r\n        // the leading coefficient (the first nonzero number from the left, also called the pivot) of a nonzero row\r\n        // is always strictly to the right of the leading coefficient of the row above it\r\n        let previousIdx = -1;\r\n        for (let i = 0; i < this.m; i++) {\r\n            const currentPivotIdx = this.rowPivotPosition(i);\r\n            if (0 > currentPivotIdx) {\r\n                continue;\r\n            } // this is a zero row, no pivot\r\n            // leading coefficient must be 1\r\n            if (!this.elements[i][currentPivotIdx].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1))) {\r\n                return false;\r\n            }\r\n            if (previousIdx < currentPivotIdx) {\r\n                previousIdx = currentPivotIdx;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isReducedRowEchelonForm() {\r\n        if (!this.isRowEchelonForm()) {\r\n            return false;\r\n        }\r\n        // each leading coefficient is the only nonzero entry in its column\r\n        for (let i = 0; i < this.m; i++) {\r\n            const pivotPosition = this.rowPivotPosition(i);\r\n            if (1 < this.numberOfNonZeroElementForColumn(pivotPosition)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    toReducedRowEchelonForm() {\r\n        let res = this.deepCopy();\r\n        let lead = 0;\r\n        for (let r = 0; r < res.m; r++) {\r\n            if (res.n <= lead) {\r\n                break;\r\n            }\r\n            let i = r;\r\n            while (res.elements[i][lead].equals(0)) {\r\n                i++;\r\n                if (res.m === i) {\r\n                    i = r;\r\n                    lead++;\r\n                    if (res.n === lead) {\r\n                        lead--;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            res.switchRows(i, r);\r\n            if (!res.elements[r][lead].equals(0)) {\r\n                res.multiplyRow(r, res.elements[r][lead].reciprocal());\r\n            }\r\n            for (let j = 0; j < res.m; j++) {\r\n                if (j !== r) {\r\n                    res.addRows(j, r, res.elements[j][lead].opposite());\r\n                }\r\n            }\r\n            lead++;\r\n        }\r\n        return res;\r\n    }\r\n    determinant() {\r\n        // todo: implement an optimized version, like A=PLU\r\n        if (this.m !== this.n) {\r\n            throw \"Determinant can only be calculated on a square matrix\";\r\n        }\r\n        if (this.m === 1) {\r\n            return this.elements[0][0];\r\n        }\r\n        let ret = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n        for (let i = 0; i < this.n; i++) {\r\n            let minor = this.elements[0][i].mult(this.cofactor(0, i).determinant());\r\n            ret = ret.add(minor.mult(Math.pow((-1), i)));\r\n        }\r\n        return ret;\r\n    }\r\n    isZeroRow(rowId) {\r\n        for (let j = 0; j < this.n; j++) {\r\n            if (!this.elements[rowId][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    rowPivotPosition(rowId) {\r\n        for (let j = 0; j < this.n; j++) {\r\n            if (!this.elements[rowId][j].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                return j;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    numberOfNonZeroElementForColumn(columnId) {\r\n        let acc = 0;\r\n        for (let j = 0; j < this.m; j++) {\r\n            if (!this.elements[j][columnId].equals(new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0))) {\r\n                acc++;\r\n            }\r\n        }\r\n        return acc;\r\n    }\r\n    cofactor(rowId, columnId) {\r\n        let ret = new Matrix(this.m - 1, this.n - 1);\r\n        let rowOffset = 0;\r\n        for (let i = 0; i < this.m - 1; i++) {\r\n            if (i === rowId) {\r\n                rowOffset = 1;\r\n            }\r\n            let columnOffset = 0;\r\n            for (let j = 0; j < this.n - 1; j++) {\r\n                if (j === columnId) {\r\n                    columnOffset = 1;\r\n                }\r\n                ret.elements[i][j] = this.elements[i + rowOffset][j + columnOffset];\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    static augment(A, B) {\r\n        if (A.m !== B.m) {\r\n            throw new Error(\"The two matrices (vector) must have the same number of rows (elements).\");\r\n        }\r\n        let ret = null;\r\n        if (B instanceof Matrix) {\r\n            ret = new Matrix(A.m, B.n + A.n);\r\n            for (let i = 0; i < A.m; i++) {\r\n                for (let j = 0; j < A.n; j++) {\r\n                    ret.elements[i][j] = A.elements[i][j];\r\n                }\r\n            }\r\n            for (let i = 0; i < B.m; i++) {\r\n                for (let j = 0; j < B.n; j++) {\r\n                    ret.elements[i][A.n + j] = B.elements[i][j];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (B instanceof _structures_Vector__WEBPACK_IMPORTED_MODULE_1__[\"Vector\"]) {\r\n                ret = new Matrix(A.m, A.n + 1);\r\n                for (let i = 0; i < A.m; i++) {\r\n                    for (let j = 0; j < A.n; j++) {\r\n                        ret.elements[i][j] = A.elements[i][j];\r\n                    }\r\n                }\r\n                for (let j = 0; j < B.m; j++) {\r\n                    ret.elements[j][A.n] = B.elements[j];\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    // row-multiplying transformations\r\n    static multiplication(n, row1, row2, mult) {\r\n        if (n < row1 || n < row2) {\r\n            throw new Error(\"Column index must be less or equalt than matrix size.\");\r\n        }\r\n        let matrix = new MatrixIdentity(n);\r\n        matrix.elements[row1][row2] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](mult);\r\n        return matrix;\r\n    }\r\n    static randomSquare() {\r\n        const matrix = new Matrix(Math.floor(Math.random() * 4) + 3, Math.floor(Math.random() * 4) + 3); // minimum size 3x3 matrix\r\n        for (let i = 0; i < matrix.m; i++) {\r\n            for (let j = 0; j < matrix.n; j++) {\r\n                matrix.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](Math.floor(Math.random() * 100 - 50));\r\n            }\r\n        }\r\n        return matrix;\r\n    }\r\n    static random2() {\r\n        const numberOfUnknowns = Math.floor(Math.random() * 4 + 3); // between 3 and 7 unknonws\r\n        const unknowns = [];\r\n        for (let i = 0; i < numberOfUnknowns; i++) {\r\n            unknowns[i] = Math.floor(Math.random() * 20 - 10);\r\n        }\r\n        // todo: change below\r\n        const matrix = new Matrix(Math.floor(Math.random() * 4) + 3, Math.floor(Math.random() * 4) + 3);\r\n        return matrix;\r\n    }\r\n}\r\nclass MatrixIdentity extends Matrix {\r\n    constructor(m) {\r\n        super(m, m);\r\n        this.elements = [];\r\n        for (let i = 0; i < this.m; i++) {\r\n            this.elements[i] = [];\r\n            for (let j = 0; j < this.m; j++) {\r\n                if (i === j) {\r\n                    this.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1);\r\n                }\r\n                else {\r\n                    this.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// elimination - multiply on the left (E*A); Row-addition transformations\r\n// to mult*(row2 of Matrix A) add (row1 of Matrix A)\r\nclass MatrixElimination extends Matrix {\r\n    constructor(m, r1, r2, mult) {\r\n        if (m < r1 || m < r2) {\r\n            throw new Error(\"Column index must be less than or equal to the matrix size.\");\r\n        }\r\n        super(m, m);\r\n        this.row1 = r1;\r\n        this.row2 = r2;\r\n        this.elements = [];\r\n        for (let i = 0; i < this.m; i++) {\r\n            this.elements[i] = [];\r\n            for (let j = 0; j < this.m; j++) {\r\n                if (i === j) {\r\n                    this.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1);\r\n                }\r\n                else {\r\n                    this.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n                }\r\n            }\r\n        }\r\n        if (typeof mult === \"number\") {\r\n            this.elements[r1][r2] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](mult);\r\n        }\r\n        else {\r\n            if (mult instanceof _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"]) {\r\n                this.elements[r1][r2] = mult;\r\n            }\r\n        }\r\n    }\r\n}\r\n// permutation - multiply on the right (A*P); Row-switching transformations\r\nclass MatrixPermutation extends Matrix {\r\n    constructor(m, row1, row2) {\r\n        if (m < row1 || m < row2) {\r\n            throw new Error(\"Column index must be less than or equal to the matrix size.\");\r\n        }\r\n        super(m, m);\r\n        this.elements = [];\r\n        for (let i = 0; i < this.m; i++) {\r\n            this.elements[i] = [];\r\n            for (let j = 0; j < this.m; j++) {\r\n                if (i === j) {\r\n                    this.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1);\r\n                }\r\n                else {\r\n                    this.elements[i][j] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n                }\r\n            }\r\n        }\r\n        this.elements[row1][row1] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n        this.elements[row1][row2] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1);\r\n        this.elements[row2][row2] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](0);\r\n        this.elements[row2][row1] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_0__[\"RationalNumber\"](1);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./structures/Matrix.ts?");

/***/ }),

/***/ "./structures/Queue.ts":
/*!*****************************!*\
  !*** ./structures/Queue.ts ***!
  \*****************************/
/*! exports provided: Queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Queue\", function() { return Queue; });\nclass Queue {\r\n    constructor() {\r\n        this.queue = [];\r\n    }\r\n    isEmpty() {\r\n        return this.queue.length === 0;\r\n    }\r\n    enqueue(element) {\r\n        this.queue.push(element);\r\n    }\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            throw new Error(\"Queue is empty\");\r\n        }\r\n        return this.queue.shift();\r\n    }\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            throw new Error(\"Queue is empty\");\r\n        }\r\n        return this.queue[0];\r\n    }\r\n    toArray() {\r\n        return this.queue;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./structures/Queue.ts?");

/***/ }),

/***/ "./structures/RationalNumber.ts":
/*!**************************************!*\
  !*** ./structures/RationalNumber.ts ***!
  \**************************************/
/*! exports provided: RationalNumber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RationalNumber\", function() { return RationalNumber; });\n/* harmony import */ var _structures_ArithmeticEvaluator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures/ArithmeticEvaluator */ \"./structures/ArithmeticEvaluator.ts\");\n/* harmony import */ var _structures_Queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/Queue */ \"./structures/Queue.ts\");\n/* harmony import */ var _structures_Stack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures/Stack */ \"./structures/Stack.ts\");\n\r\n\r\n\r\nclass RationalNumber {\r\n    constructor(n, d = 1) {\r\n        if (d === 0) {\r\n            throw new Error(\"Division by zero!\");\r\n        }\r\n        // todo: potential for overflow. When Math.sign becomes available in TypeScript use it instead of the multiplication\r\n        let sign = n * d >= 0 ? 1 : -1;\r\n        this.numerator = sign * Math.abs(n);\r\n        this.denominator = Math.abs(d);\r\n    }\r\n    greatestCommonDivisor(a, b) {\r\n        return b ? this.greatestCommonDivisor(b, a % b) : a;\r\n    }\r\n    leastCommonMultiple(a, b) {\r\n        return Math.abs(a * b / this.greatestCommonDivisor(a, b));\r\n    }\r\n    simplifiedForm() {\r\n        let gcd = this.greatestCommonDivisor(this.numerator, this.denominator);\r\n        return new RationalNumber(this.numerator / gcd, this.denominator / gcd);\r\n    }\r\n    equals(x) {\r\n        let rn1 = this.simplifiedForm();\r\n        if (typeof x === \"number\") {\r\n            return rn1.numerator === x && rn1.denominator === 1;\r\n        }\r\n        else {\r\n            let rn2 = x.simplifiedForm();\r\n            return rn1.numerator === rn2.numerator && rn1.denominator === rn2.denominator;\r\n        }\r\n    }\r\n    lt(x) {\r\n        let rn1 = this.simplifiedForm();\r\n        if (typeof x === \"number\") {\r\n            return rn1.numerator < x * rn1.denominator;\r\n        }\r\n        else {\r\n            let rn2 = x.simplifiedForm();\r\n            return rn1.numerator * rn2.denominator < rn2.numerator * rn1.denominator;\r\n        }\r\n    }\r\n    le(x) {\r\n        let rn1 = this.simplifiedForm();\r\n        if (typeof x === \"number\") {\r\n            return rn1.numerator <= x * rn1.denominator;\r\n        }\r\n        else {\r\n            let rn2 = x.simplifiedForm();\r\n            return rn1.numerator * rn2.denominator <= rn2.numerator * rn1.denominator;\r\n        }\r\n    }\r\n    gt(x) {\r\n        let rn1 = this.simplifiedForm();\r\n        if (typeof x === \"number\") {\r\n            return rn1.numerator > x * rn1.denominator;\r\n        }\r\n        else {\r\n            let rn2 = x.simplifiedForm();\r\n            return rn1.numerator * rn2.denominator > rn2.numerator * rn1.denominator;\r\n        }\r\n    }\r\n    ge(x) {\r\n        let rn1 = this.simplifiedForm();\r\n        if (typeof x === \"number\") {\r\n            return rn1.numerator >= x * rn1.denominator;\r\n        }\r\n        else {\r\n            let rn2 = x.simplifiedForm();\r\n            return rn1.numerator * rn2.denominator >= rn2.numerator * rn1.denominator;\r\n        }\r\n    }\r\n    // multiplicative inverse\r\n    reciprocal() {\r\n        if (this.denominator === 0) {\r\n            throw new Error(\"Division by zero!\");\r\n        }\r\n        return new RationalNumber(this.denominator, this.numerator);\r\n    }\r\n    // additive inverse\r\n    opposite() {\r\n        return new RationalNumber(this.numerator * (-1), this.denominator);\r\n    }\r\n    add(x) {\r\n        if (typeof x === \"number\") {\r\n            return new RationalNumber((this.numerator + x * this.denominator), this.denominator);\r\n        }\r\n        else {\r\n            let lcm = this.leastCommonMultiple(this.denominator, x.denominator);\r\n            let n1 = this.numerator * lcm / this.denominator;\r\n            let n2 = x.numerator * lcm / x.denominator;\r\n            return new RationalNumber(n1 + n2, lcm);\r\n        }\r\n    }\r\n    sub(x) {\r\n        if (typeof x === \"number\") {\r\n            return new RationalNumber((this.numerator - x * this.denominator), this.denominator);\r\n        }\r\n        else {\r\n            let lcm = this.leastCommonMultiple(this.denominator, x.denominator);\r\n            let n1 = this.numerator * lcm / this.denominator;\r\n            let n2 = x.numerator * lcm / x.denominator;\r\n            return new RationalNumber(n1 - n2, lcm);\r\n        }\r\n    }\r\n    mult(x) {\r\n        if (typeof x === \"number\") {\r\n            return new RationalNumber((this.numerator * x), this.denominator);\r\n        }\r\n        else {\r\n            return new RationalNumber((this.numerator * x.numerator), x.denominator * this.denominator);\r\n        }\r\n    }\r\n    div(x) {\r\n        if (typeof x === \"number\") {\r\n            return new RationalNumber((this.numerator), this.denominator * x);\r\n        }\r\n        else {\r\n            return new RationalNumber((this.numerator * x.denominator), x.numerator * this.denominator);\r\n        }\r\n    }\r\n    exp(x) {\r\n        if (typeof x === \"number\") {\r\n            return new RationalNumber(Math.pow(this.numerator, x), Math.pow(this.denominator, x));\r\n        }\r\n        else {\r\n            if (this.denominator !== 1) {\r\n                throw Error(\"Exponentiation with rational powers not supported.\");\r\n            }\r\n            return new RationalNumber(Math.pow(this.numerator, x.numerator), Math.pow(this.denominator, x.numerator));\r\n        }\r\n    }\r\n    toNumber() {\r\n        return this.numerator / this.denominator;\r\n    }\r\n    toString() {\r\n        return this.numerator.toString() + (1 === this.denominator ? \"\" : \"/\" + this.denominator.toString());\r\n    }\r\n    deepCopy() {\r\n        return new RationalNumber(this.numerator, this.denominator);\r\n    }\r\n    static fromString(code) {\r\n        let p = new _structures_ArithmeticEvaluator__WEBPACK_IMPORTED_MODULE_0__[\"Parser\"]();\r\n        return p.parse(code);\r\n    }\r\n    static isNumber(code) {\r\n        return /^\\d/.test(code);\r\n    }\r\n    static isOperator(code) {\r\n        return /[\\+\\-\\*\\/\\^]/.test(code);\r\n    }\r\n    static isLeftAssociativeOperator(operator) {\r\n        return /[\\+\\-\\*\\/]/.test(operator);\r\n    }\r\n    static isRightAssociativeOperator(operator) {\r\n        return /[\\^]/.test(operator);\r\n    }\r\n    static precedence(operator) {\r\n        if (/[\\+\\-]/.test(operator)) {\r\n            return 1;\r\n        }\r\n        if (/[\\*\\/]/.test(operator)) {\r\n            return 2;\r\n        }\r\n        if (/[\\^]/.test(operator)) {\r\n            return 3;\r\n        }\r\n        throw new Error(\"Unknown operator.\");\r\n    }\r\n    static toReversePolishNotation(code) {\r\n        let tokens = code.match(/\\(|\\)|\\d+(\\.\\d+)?|\\w+|[\\+\\-\\*\\/\\^]/g);\r\n        let i = 0;\r\n        let outputQueue = new _structures_Queue__WEBPACK_IMPORTED_MODULE_1__[\"Queue\"]();\r\n        let operatorStack = new _structures_Stack__WEBPACK_IMPORTED_MODULE_2__[\"Stack\"]();\r\n        while (i < tokens.length) {\r\n            if (this.isNumber(tokens[i])) {\r\n                outputQueue.enqueue(tokens[i]);\r\n            }\r\n            else if (this.isOperator(tokens[i])) {\r\n                let op1 = tokens[i];\r\n                while (!operatorStack.isEmpty() && this.isOperator(operatorStack.peek())) {\r\n                    if ((this.isLeftAssociativeOperator(op1) && (this.precedence(op1) <= this.precedence(operatorStack.peek()))) ||\r\n                        (this.isRightAssociativeOperator(op1) && (this.precedence(op1) < this.precedence(operatorStack.peek())))) {\r\n                        outputQueue.enqueue(operatorStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorStack.push(op1);\r\n            }\r\n            else if (tokens[i] === \"(\") {\r\n                operatorStack.push(tokens[i]);\r\n            }\r\n            else if (tokens[i] === \")\") {\r\n                while (!operatorStack.isEmpty() && operatorStack.peek() !== \"(\") {\r\n                    outputQueue.enqueue(operatorStack.pop());\r\n                }\r\n                if (!operatorStack.isEmpty() && operatorStack.peek() === \"(\") {\r\n                    operatorStack.pop();\r\n                }\r\n                else {\r\n                    throw new Error(\"Mismatched parentheses.\");\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        while (!operatorStack.isEmpty()) {\r\n            if (operatorStack.peek() === \"(\") {\r\n                throw new Error(\"Mismatched parentheses.\");\r\n            }\r\n            else {\r\n                outputQueue.enqueue(operatorStack.pop());\r\n            }\r\n        }\r\n        return outputQueue.toArray();\r\n    }\r\n    static evaluateFromRPN(tokens) {\r\n        let stack = new _structures_Stack__WEBPACK_IMPORTED_MODULE_2__[\"Stack\"]();\r\n        for (let i = 0; i < tokens.length; i++) {\r\n            if (!this.isOperator(tokens[i])) {\r\n                stack.push(new RationalNumber(parseFloat(tokens[i])));\r\n            }\r\n            else {\r\n                let op1 = stack.pop();\r\n                let op2 = stack.pop();\r\n                switch (tokens[i]) {\r\n                    case \"+\":\r\n                        stack.push(op2.add(op1));\r\n                        break;\r\n                    case \"-\":\r\n                        stack.push(op2.sub(op1));\r\n                        break;\r\n                    case \"*\":\r\n                        stack.push(op2.mult(op1));\r\n                        break;\r\n                    case \"/\":\r\n                        stack.push(op2.div(op1));\r\n                        break;\r\n                    case \"^\":\r\n                        stack.push(op2.exp(op1.toNumber()));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return stack.pop().simplifiedForm();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./structures/RationalNumber.ts?");

/***/ }),

/***/ "./structures/Stack.ts":
/*!*****************************!*\
  !*** ./structures/Stack.ts ***!
  \*****************************/
/*! exports provided: Stack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stack\", function() { return Stack; });\nclass Stack {\r\n    constructor() {\r\n        this.stack = [];\r\n    }\r\n    isEmpty() {\r\n        return this.stack.length === 0;\r\n    }\r\n    push(element) {\r\n        this.stack.push(element);\r\n    }\r\n    pop() {\r\n        if (this.isEmpty()) {\r\n            throw new Error(\"Stack is empty\");\r\n        }\r\n        return this.stack.pop();\r\n    }\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            throw new Error(\"Stack is empty\");\r\n        }\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n    toArray() {\r\n        return this.stack;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./structures/Stack.ts?");

/***/ }),

/***/ "./structures/Vector.ts":
/*!******************************!*\
  !*** ./structures/Vector.ts ***!
  \******************************/
/*! exports provided: Vector, ColumnVector, RowVector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vector\", function() { return Vector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColumnVector\", function() { return ColumnVector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RowVector\", function() { return RowVector; });\n/* harmony import */ var _structures_Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures/Matrix */ \"./structures/Matrix.ts\");\n/* harmony import */ var _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/RationalNumber */ \"./structures/RationalNumber.ts\");\n\r\n\r\nclass Vector {\r\n    constructor(n) {\r\n        if (typeof n === \"number\") {\r\n            this.m = n;\r\n            this.elements = [];\r\n        }\r\n        else if (n instanceof Array) {\r\n            this.m = n.length;\r\n            this.elements = [];\r\n            for (let i = 0; i < this.m; i++) {\r\n                this.elements[i] = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_1__[\"RationalNumber\"](n[i]);\r\n            }\r\n        }\r\n    }\r\n    add(x) {\r\n        if (this.m !== x.m) {\r\n            throw new Error(\"Mismatched dimensions.\");\r\n        }\r\n        const res = new Vector(this.m);\r\n        for (let i = 0; i < res.m; i++) {\r\n            res.elements[i] = this.elements[i].add(x.elements[i]);\r\n        }\r\n        return res;\r\n    }\r\n    sub(x) {\r\n        if (this.m !== x.m) {\r\n            throw new Error(\"Mismatched dimensions.\");\r\n        }\r\n        const res = new Vector(this.m);\r\n        for (let i = 0; i < res.m; i++) {\r\n            res.elements[i] = this.elements[i].sub(x.elements[i]);\r\n        }\r\n        return res;\r\n    }\r\n    mult(x) {\r\n        const res = new Vector(this.m);\r\n        for (let i = 0; i < res.m; i++) {\r\n            res.elements[i] = this.elements[i].mult(x);\r\n        }\r\n        return res;\r\n    }\r\n    // [ALIASES]: innerProduct, projectionProduct, scalarProduct\r\n    dotProduct(x) {\r\n        if (this.m !== x.m) {\r\n            throw new Error(\"Mismatched dimensions.\");\r\n        }\r\n        let res = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_1__[\"RationalNumber\"](0);\r\n        for (let i = 0; i < x.m; i++) {\r\n            res = res.add(this.elements[i].mult(x.elements[i]));\r\n        }\r\n        return res;\r\n    }\r\n    // [ALIASES]: directedAreaProduct, vectorProduct\r\n    crossProduct(x) {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    deepCopy() {\r\n        const ret = new Vector(this.m);\r\n        for (let i = 0; i < this.m; i++) {\r\n            ret.elements[i] = this.elements[i];\r\n        }\r\n        return ret;\r\n    }\r\n    toMatrix() {\r\n        const ret = new _structures_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](this.m, 1);\r\n        for (let i = 0; i < this.m; i++) {\r\n            ret.elements[i][0] = this.elements[i];\r\n        }\r\n        return ret;\r\n    }\r\n    static arelLinearlyIndependent(vectors) {\r\n        let m = vectors.length;\r\n        if (0 === m) {\r\n            return true;\r\n        }\r\n        let n = vectors[0].m;\r\n        for (let i = 1; i < vectors.length; i++) {\r\n            if (n !== vectors[i].m) {\r\n                throw new Error(\"Mismatched dimensions.\");\r\n            }\r\n        }\r\n        if (m > n) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass ColumnVector extends Vector {\r\n}\r\nclass RowVector extends Vector {\r\n    matrixProduct(m) {\r\n        if (this.m !== m.n) {\r\n            throw new Error(\"Mismatched dimensions.\");\r\n        }\r\n        const res = new RowVector(this.m);\r\n        for (let i = 0; i < this.m; i++) {\r\n            let sum = new _structures_RationalNumber__WEBPACK_IMPORTED_MODULE_1__[\"RationalNumber\"](0);\r\n            for (let j = 0; j < m.n; j++) {\r\n                sum = sum.add(m.elements[i][j].mult(this.elements[i]));\r\n            }\r\n            res.elements[i] = sum;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./structures/Vector.ts?");

/***/ })

/******/ });